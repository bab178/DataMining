=== Run information ===

Scheme:       weka.classifiers.trees.J48 -U -M 2
Relation:     labor-neg-data
Instances:    57
Attributes:   17
              duration
              wage-increase-first-year
              wage-increase-second-year
              wage-increase-third-year
              cost-of-living-adjustment
              working-hours
              pension
              standby-pay
              shift-differential
              education-allowance
              statutory-holidays
              vacation
              longterm-disability-assistance
              contribution-to-dental-plan
              bereavement-assistance
              contribution-to-health-plan
              class
Test mode:    10-fold cross-validation

=== Classifier model (full training set) ===

J48 unpruned tree
------------------

wage-increase-first-year <= 2.5
|   education-allowance = yes
|   |   wage-increase-first-year <= 2.1
|   |   |   pension = none: bad (2.43/0.43)
|   |   |   pension = ret_allw: bad (0.0)
|   |   |   pension = empl_contr: good (3.16/1.5)
|   |   wage-increase-first-year > 2.1: bad (2.04/0.04)
|   education-allowance = no
|   |   contribution-to-health-plan = none: bad (3.39)
|   |   contribution-to-health-plan = half: good (0.18/0.05)
|   |   contribution-to-health-plan = full: bad (4.06)
wage-increase-first-year > 2.5
|   longterm-disability-assistance = yes
|   |   statutory-holidays <= 10
|   |   |   wage-increase-first-year <= 3: bad (2.0)
|   |   |   wage-increase-first-year > 3: good (3.99)
|   |   statutory-holidays > 10: good (25.67)
|   longterm-disability-assistance = no
|   |   contribution-to-health-plan = none: bad (4.07/1.07)
|   |   contribution-to-health-plan = half: bad (3.37/1.37)
|   |   contribution-to-health-plan = full: good (2.62)

Number of Leaves  : 	13

Size of the tree : 	22


Time taken to build model: 0 seconds

=== Stratified cross-validation ===
=== Summary ===

Correctly Classified Instances          45               78.9474 %
Incorrectly Classified Instances        12               21.0526 %
Kappa statistic                          0.5378
Mean absolute error                      0.2677
Root mean squared error                  0.432 
Relative absolute error                 58.5226 %
Root relative squared error             90.4708 %
Total Number of Instances               57     

=== Detailed Accuracy By Class ===

                 TP Rate  FP Rate  Precision  Recall   F-Measure  MCC      ROC Area  PRC Area  Class
                 0.700    0.162    0.700      0.700    0.700      0.538    0.768     0.673     bad
                 0.838    0.300    0.838      0.838    0.838      0.538    0.769     0.807     good
Weighted Avg.    0.789    0.252    0.789      0.789    0.789      0.538    0.768     0.760     

=== Confusion Matrix ===

  a  b   <-- classified as
 14  6 |  a = bad
  6 31 |  b = good

=== Source code ===

// Generated with Weka 3.8.1
//
// This code is public domain and comes with no warranty.
//
// Timestamp: Wed Feb 15 17:23:40 CST 2017

package weka.classifiers;

import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.Capabilities.Capability;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.RevisionUtils;
import weka.classifiers.Classifier;
import weka.classifiers.AbstractClassifier;

public class WekaWrapper
  extends AbstractClassifier {

  /**
   * Returns only the toString() method.
   *
   * @return a string describing the classifier
   */
  public String globalInfo() {
    return toString();
  }

  /**
   * Returns the capabilities of this classifier.
   *
   * @return the capabilities
   */
  public Capabilities getCapabilities() {
    weka.core.Capabilities result = new weka.core.Capabilities(this);

    result.enable(weka.core.Capabilities.Capability.NOMINAL_ATTRIBUTES);
    result.enable(weka.core.Capabilities.Capability.NUMERIC_ATTRIBUTES);
    result.enable(weka.core.Capabilities.Capability.DATE_ATTRIBUTES);
    result.enable(weka.core.Capabilities.Capability.MISSING_VALUES);
    result.enable(weka.core.Capabilities.Capability.NOMINAL_CLASS);
    result.enable(weka.core.Capabilities.Capability.MISSING_CLASS_VALUES);


    result.setMinimumNumberInstances(0);

    return result;
  }

  /**
   * only checks the data against its capabilities.
   *
   * @param i the training data
   */
  public void buildClassifier(Instances i) throws Exception {
    // can classifier handle the data?
    getCapabilities().testWithFail(i);
  }

  /**
   * Classifies the given instance.
   *
   * @param i the instance to classify
   * @return the classification result
   */
  public double classifyInstance(Instance i) throws Exception {
    Object[] s = new Object[i.numAttributes()];
    
    for (int j = 0; j < s.length; j++) {
      if (!i.isMissing(j)) {
        if (i.attribute(j).isNominal())
          s[j] = new String(i.stringValue(j));
        else if (i.attribute(j).isNumeric())
          s[j] = new Double(i.value(j));
      }
    }
    
    // set class value to missing
    s[i.classIndex()] = null;
    
    return WekaClassifier.classify(s);
  }

  /**
   * Returns the revision string.
   * 
   * @return        the revision
   */
  public String getRevision() {
    return RevisionUtils.extract("1.0");
  }

  /**
   * Returns only the classnames and what classifier it is based on.
   *
   * @return a short description
   */
  public String toString() {
    return "Auto-generated classifier wrapper, based on weka.classifiers.trees.J48 (generated with Weka 3.8.1).\n" + this.getClass().getName() + "/WekaClassifier";
  }

  /**
   * Runs the classfier from commandline.
   *
   * @param args the commandline arguments
   */
  public static void main(String args[]) {
    runClassifier(new WekaWrapper(), args);
  }
}

class WekaClassifier {

  public static double classify(Object[] i)
    throws Exception {

    double p = Double.NaN;
    p = WekaClassifier.N22eef38c37(i);
    return p;
  }
  static double N22eef38c37(Object []i) {
    double p = Double.NaN;
    if (i[1] == null) {
      p = 0;
    } else if (((Double) i[1]).doubleValue() <= 2.5) {
    p = WekaClassifier.N196164e38(i);
    } else if (((Double) i[1]).doubleValue() > 2.5) {
    p = WekaClassifier.N69339daf42(i);
    } 
    return p;
  }
  static double N196164e38(Object []i) {
    double p = Double.NaN;
    if (i[9] == null) {
      p = 0;
    } else if (i[9].equals("yes")) {
    p = WekaClassifier.N42c07d4239(i);
    } else if (i[9].equals("no")) {
    p = WekaClassifier.N5826d48341(i);
    } 
    return p;
  }
  static double N42c07d4239(Object []i) {
    double p = Double.NaN;
    if (i[1] == null) {
      p = 0;
    } else if (((Double) i[1]).doubleValue() <= 2.1) {
    p = WekaClassifier.Nd81242c40(i);
    } else if (((Double) i[1]).doubleValue() > 2.1) {
      p = 0;
    } 
    return p;
  }
  static double Nd81242c40(Object []i) {
    double p = Double.NaN;
    if (i[6] == null) {
      p = 0;
    } else if (i[6].equals("none")) {
      p = 0;
    } else if (i[6].equals("ret_allw")) {
      p = 0;
    } else if (i[6].equals("empl_contr")) {
      p = 1;
    } 
    return p;
  }
  static double N5826d48341(Object []i) {
    double p = Double.NaN;
    if (i[15] == null) {
      p = 0;
    } else if (i[15].equals("none")) {
      p = 0;
    } else if (i[15].equals("half")) {
      p = 1;
    } else if (i[15].equals("full")) {
      p = 0;
    } 
    return p;
  }
  static double N69339daf42(Object []i) {
    double p = Double.NaN;
    if (i[12] == null) {
      p = 1;
    } else if (i[12].equals("yes")) {
    p = WekaClassifier.N2858d7a643(i);
    } else if (i[12].equals("no")) {
    p = WekaClassifier.N42906d0545(i);
    } 
    return p;
  }
  static double N2858d7a643(Object []i) {
    double p = Double.NaN;
    if (i[10] == null) {
      p = 1;
    } else if (((Double) i[10]).doubleValue() <= 10.0) {
    p = WekaClassifier.N2c7c36c544(i);
    } else if (((Double) i[10]).doubleValue() > 10.0) {
      p = 1;
    } 
    return p;
  }
  static double N2c7c36c544(Object []i) {
    double p = Double.NaN;
    if (i[1] == null) {
      p = 0;
    } else if (((Double) i[1]).doubleValue() <= 3.0) {
      p = 0;
    } else if (((Double) i[1]).doubleValue() > 3.0) {
      p = 1;
    } 
    return p;
  }
  static double N42906d0545(Object []i) {
    double p = Double.NaN;
    if (i[15] == null) {
      p = 0;
    } else if (i[15].equals("none")) {
      p = 0;
    } else if (i[15].equals("half")) {
      p = 0;
    } else if (i[15].equals("full")) {
      p = 1;
    } 
    return p;
  }
}
